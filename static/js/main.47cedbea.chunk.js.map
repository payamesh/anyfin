{"version":3,"sources":["App.module.css","components/Country/Country.module.css","components/Searchbar/Searchbar.module.css","components/Country/Country.js","components/Searchbar/Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Country","country","sek","countryCurrency","name","capital","population","currencies","useState","currencyNumber","setCurrencyNumber","sekToCurrency","className","styles","countryHeader","code","onChange","e","val","target","value","type","placeholder","style","width","fontSize","toFixed","Searchbar","searchCountry","searchbar","htmlFor","display","App","countries","setCountries","setCurrencies","searchWord","setSearchWord","searchResult","setSearchResult","loadMore","setLoadMore","useEffect","fetch","then","res","json","data","results","filter","toLowerCase","includes","wrapperBody","Fragment","countryContainer","slice","map","key","rates","SEK","showMore","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47cedbea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchResult\":\"App_searchResult__3zZ1-\",\"wrapperBody\":\"App_wrapperBody__3GaUe\",\"countryContainer\":\"App_countryContainer__3TBWO\",\"showMore\":\"App_showMore__26bKJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"country\":\"Country_country__3c-TC\",\"countryHeader\":\"Country_countryHeader__3FGL5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar\":\"Searchbar_searchbar__3u0rY\"};","import React, { useState } from \"react\";\r\nimport styles from \"./Country.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nexport default function Country({ country, sek, countryCurrency }) {\r\n  const { name, capital, population, currencies } = country;\r\n  const [currencyNumber, setCurrencyNumber] = useState(0);\r\n\r\n  //break out current currency since we didnt have access to &base API-call , and don't want to waste 250 API calls on every render (if we were to use &from and &to)\r\n  const sekToCurrency = (1 / countryCurrency) * sek;\r\n  //Calculate the currency of specific country\r\n  const handleCurrency = (val) => {\r\n    setCurrencyNumber(val / sekToCurrency);\r\n  };\r\n  return (\r\n    <div className={styles.country}>\r\n      <h2 className={styles.countryHeader}>{name}</h2>\r\n      <p>Capital: {capital}</p>\r\n      <p>Population: {population}</p>\r\n      <p>Currency: {currencies[0]?.code}</p>\r\n      <input\r\n        onChange={(e) => handleCurrency(e.target.value)}\r\n        type=\"number\"\r\n        placeholder=\"Enter value in SEK\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <p style={{ fontSize: \"18px\" }}>{currencyNumber.toFixed(3)}</p>\r\n      <p>\r\n        {currencies[0]?.name}&nbsp;&#9679;&nbsp;({currencies[0]?.code})\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\nCountry.propTypes = {\r\n  country: PropTypes.object.isRequired,\r\n  sek: PropTypes.number.isRequired,\r\n  countryCurrency: PropTypes.number,\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Searchbar.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Searchbar({ searchCountry }) {\r\n  return (\r\n    <div className={styles.searchbar}>\r\n      <label\r\n        htmlFor=\"search\"\r\n        style={{\r\n          display: \"none\",\r\n        }}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => searchCountry(e.target.value)}\r\n        placeholder=\"Search for a country..\"\r\n      ></input>\r\n    </div>\r\n  );\r\n}\r\nSearchbar.propTypes = {\r\n  searchCountry: PropTypes.func,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport styles from \"./App.module.css\";\nimport Country from \"./components/Country/Country\";\nimport Searchbar from \"./components/Searchbar/Searchbar\";\nfunction App() {\n  const [countries, setCountries] = useState();\n  const [currencies, setCurrencies] = useState();\n  const [searchWord, setSearchWord] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loadMore, setLoadMore] = useState(8);\n\n  const searchCountry = (value) => {\n    setSearchWord(value);\n  };\n\n  useEffect(() => {\n    fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCountries(data);\n      });\n\n    fetch(\n      \"http://data.fixer.io/api/latest?access_key=b872f3b7a4fefeb94a3a03e1a9896258\"\n    ) //since I wasnt able to use \"&base=SEK\" without paying for the API, I convert it in Country.js\n      .then((res) => res.json())\n      .then((data) => {\n        setCurrencies(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (countries) {\n      const results = countries.filter((countries) =>\n        countries.name.toLowerCase().includes(searchWord.toLowerCase())\n      );\n      setSearchResult(results);\n    }\n  }, [searchWord, countries]);\n  return (\n    <div className={styles.wrapperBody}>\n      {countries && currencies ? (\n        <React.Fragment>\n          <Searchbar value={searchWord} searchCountry={searchCountry} />\n          {searchResult && (\n            <div className={styles.countryContainer}>\n              {searchResult.slice(0, loadMore).map((\n                country //limited to 8 results\n              ) => (\n                <Country\n                  key={country.name}\n                  sek={currencies ? currencies.rates.SEK : 10.62} //get the rate for sek\n                  country={country}\n                  countryCurrency={\n                    currencies.rates[country?.currencies[0]?.code]\n                  } //use country-code to find its currency in currency object\n                />\n              ))}\n            </div>\n          )}\n\n          <button\n            className={styles.showMore}\n            onClick={() => setLoadMore(loadMore + 8)}\n          >\n            Load more\n          </button>\n        </React.Fragment>\n      ) : (\n        <p>Loading..</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}